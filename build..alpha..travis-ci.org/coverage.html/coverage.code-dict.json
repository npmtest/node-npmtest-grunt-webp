{"/home/travis/build/npmtest/node-npmtest-grunt-webp/test.js":"/* istanbul instrument in package npmtest_grunt_webp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-webp/lib.npmtest_grunt_webp.js":"/* istanbul instrument in package npmtest_grunt_webp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_webp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_webp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-webp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-webp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_webp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_webp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_webp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_webp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_webp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_webp.__dirname + '/lib.npmtest_grunt_webp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-webp/node_modules/grunt-webp/Gruntfile.js":"/*\r\n * grunt-webp\r\n * http://github.com/somerandomdude/grunt-webp\r\n * http://somerandomdude.com\r\n *\r\n * Copyright 2013 P.J. Onori\r\n * MIT license.\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(grunt) {\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n\r\n    // Before generating any new files, remove any previously-created files.\r\n    clean: {\r\n      test: ['tmp']\r\n    },\r\n\r\n    // Configuration to be run (and then tested).\r\n    webp: {\r\n      files: ['tmp/svg/*.jpg', 'tmp/svg/*.png'],\r\n      options: {\r\n        preset: 'photo',\r\n        verbose: true,\r\n        quality: 80,\r\n        alphaQuality: 80,\r\n        compressionMethod: 6,\r\n        segments: 4,\r\n        psnr: 42,\r\n        sns: 50,\r\n        filterStrength: 40,\r\n        filterSharpness: 3,\r\n        simpleFilter: true,\r\n        partitionLimit: 50,\r\n        analysisPass: 6,\r\n        multiThreading: true,\r\n        lowMemory: false,\r\n        alphaMethod: 0,\r\n        alphaFilter: 'best',\r\n        alphaCleanup: true,\r\n        noAlpha: false,\r\n        lossless: false\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  // Actually load this plugin's task(s).\r\n  grunt.loadTasks('tasks');\r\n\r\n  // These plugins provide necessary tasks.\r\n  grunt.loadNpmTasks('grunt-contrib-clean');\r\n\r\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\r\n  // plugin's task(s), then test the result.\r\n  grunt.registerTask('test', ['clean', 'webp']);\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-grunt-webp/node_modules/grunt-webp/tasks/webp.js":"/*\n * grunt-webp\n * http://github.com/somerandomdude/grunt-webp\n * http://somerandomdude.com\n *\n * Copyright (c) 2013 P.J. Onori\n * MIT license.\n */\n\n\n/*\n -h / -help  ............ short help\n  -H / -longhelp  ........ long help\n  -q <float> ............. quality factor (0:small..100:big)\n  -alpha_q <int> ......... Transparency-compression quality (0..100).\n  -preset <string> ....... Preset setting, one of:\n                            default, photo, picture,\n                            drawing, icon, text\n     -preset must come first, as it overwrites other parameters.\n  -m <int> ............... compression method (0=fast, 6=slowest)\n  -segments <int> ........ number of segments to use (1..4)\n  -size <int> ............ Target size (in bytes)\n  -psnr <float> .......... Target PSNR (in dB. typically: 42)\n\n  -s <int> <int> ......... Input size (width x height) for YUV\n  -sns <int> ............. Spatial Noise Shaping (0:off, 100:max)\n  -f <int> ............... filter strength (0=off..100)\n  -sharpness <int> ....... filter sharpness (0:most .. 7:least sharp)\n  -strong ................ use strong filter instead of simple (default).\n  -nostrong .............. use simple filter instead of strong.\n  -partition_limit <int> . limit quality to fit the 512k limit on\n                           the first partition (0=no degradation ... 100=full)\n  -pass <int> ............ analysis pass number (1..10)\n  -crop <x> <y> <w> <h> .. crop picture with the given rectangle\n  -resize <w> <h> ........ resize picture (after any cropping)\n  -mt .................... use multi-threading if available\n  -low_memory ............ reduce memory usage (slower encoding)\n  -map <int> ............. print map of extra info.\n  -print_psnr ............ prints averaged PSNR distortion.\n  -print_ssim ............ prints averaged SSIM distortion.\n  -print_lsim ............ prints local-similarity distortion.\n  -d <file.pgm> .......... dump the compressed output (PGM file).\n  -alpha_method <int> .... Transparency-compression method (0..1)\n  -alpha_filter <string> . predictive filtering for alpha plane.\n                           One of: none, fast (default) or best.\n  -alpha_cleanup ......... Clean RGB values in transparent area.\n  -noalpha ............... discard any transparency information.\n  -lossless .............. Encode image losslessly.\n  -hint <string> ......... Specify image characteristics hint.\n                           One of: photo, picture or graph\n\n  -metadata <string> ..... comma separated list of metadata to\n                           copy from the input to the output if present.\n                           Valid values: all, none (default), exif, icc, xmp\n\n  -short ................. condense printed message\n  -quiet ................. don't print anything.\n  -version ............... print version number and exit.\n  -noasm ................. disable all assembly optimizations.\n  -v ..................... verbose, e.g. print encoding/decoding times\n  -progress .............. report encoding progress\n\nExperimental Options:\n  -jpeg_like ............. Roughly match expected JPEG size.\n  -af .................... auto-adjust filter strength.\n  -pre <int> ............. pre-processing filter\n*/\n\n\n'use strict';\n\nmodule.exports = function(grunt) {\n  var path = require('path');\n  var async = require('async');\n  grunt.registerMultiTask('webp', 'WebP image format converter.', function() {\n    /**\n     * Retrieves defined options.\n     */\n    var options = this.options();\n    grunt.verbose.writeflags(options, 'Options');\n\n    var done = this.async();\n\n    var cwebp = 'cwebp';\n    if (options.binpath) {\n      cwebp = options.binpath;\n    }\n\n    // Iterate over all src-dest file pairs.\n    async.eachSeries(this.files, function(f, next) {\n      \n      /**\n       * Create folder for the dest file\n       */\n      f.dest = f.dest.replace(path.extname(f.dest), '.webp');\n      grunt.file.mkdir(path.dirname(f.dest));\n\n      var args = [];\n      /**\n       * Preset setting, one of:\n                    default, photo, picture,\n                    drawing, icon, text\n       */\n      if (options.preset) {\n        args.push('-preset');\n        args.push(options.preset);\n      }\n\n      /**\n       * Transparency-compression quality (0..100)\n       */\n      if (options.alphaQuality) {\n        args.push('-alpha_q');\n        args.push(options.alphaQuality);\n      }\n\n      /**\n       * compression method (0=fast, 6=slowest)\n       */\n      if (options.compressionMethod) {\n        args.push('-m');\n        args.push(options.compressionMethod);\n      }\n\n      /**\n       * number of segments to use (1..4)\n       */\n      if (options.segments) {\n        args.push('-segments');\n        args.push(options.segments);\n      }\n\n      /**\n       * Target PSNR (in dB. typically: 42)\n       */\n      if (options.psnr) {\n        args.push('-psnr');\n        args.push(options.psnr);\n      }\n\n      /**\n       * Input size (width x height) for YUV\n       */\n      if (options.dimensions) {\n        //TODO: Mention that dimensions are formatted as an array\n        args.push('-s');\n        args.push(options.dimensions[0]);\n        args.push(options.dimensions[1]);\n      }\n\n      /**\n       * Spatial Noise Shaping (0:off, 100:max)\n       */\n      if (options.spatialNoiseShaping) {\n        args.push('-sns');\n        args.push(options.spatialNoiseShaping);\n      }\n\n      /**\n       * filter strength (0=off..100)\n       */\n      if (options.filterStrength) {\n        args.push('-f');\n        args.push(options.filterStrength);\n      }\n\n      /**\n       * filter sharpness (0:most .. 7:least sharp)\n       */\n      if (options.filterSharpness) {\n        args.push('-sharpness');\n        args.push(options.filterSharpness);\n      }\n\n      /**\n       * use strong filter instead of simple (default).\n       */\n      if (options.simpleFilter) {\n        args.push('-nostrong');\n      }\n\n      /**\n       * limit quality to fit the 512k limit on\n                           the first partition (0=no degradation ... 100=full)\n       */\n       if (options.partitionLimit) {\n        args.push('-partition_limit');\n        args.push(options.partitionLimit);\n      }\n\n      /**\n       * analysis pass number (1..10)\n       */\n       if (options.analysisPass) {\n        args.push('-pass');\n        args.push(options.analysisPass);\n      }\n\n      /**\n       * crop picture with the given rectangle\n       */\n       if (options.crop) {\n        args.push('-crop');\n        args.push(options.crop[0]);\n        args.push(options.crop[1]);\n        args.push(options.crop[2]);\n        args.push(options.crop[3]);\n      }\n\n      /**\n       * resize picture (after any cropping)\n       */\n       if (options.resizeCrop) {\n        args.push('-resize');\n        args.push(options.resizeCrop[0]);\n        args.push(options.resizeCrop[1]);\n      }\n\n      /**\n       * use multi-threading if available\n       */\n       if (options.multiThreading) {\n        args.push('-mt');\n      }\n\n      /**\n       * reduce memory usage (slower encoding)\n       */\n       if (options.lowMemory) {\n        args.push('-low_memory');\n      }\n\n      /**\n       * Transparency-compression method\n       */\n       if (options.alphaMethod) {\n        args.push('-alpha_method');\n        args.push(options.alphaMethod);\n      }\n\n      /**\n       * predictive filtering for alpha plane.\n                           One of: none, fast (default) or best.\n       */\n       if (options.alphaFilter) {\n        args.push('-alpha_filter');\n        args.push(options.alphaFilter);\n      }\n\n      /**\n       * Clean RGB values in transparent area.\n       */\n       if (options.alphaCleanup) {\n        args.push('-alpha_cleanup');\n      }\n\n      /**\n       * discard any transparency information.\n       */\n       if (options.noAlpha) {\n        args.push('-noalpha');\n      }\n\n      /**\n       * Encode image losslessly.\n       */\n       if (options.lossless) {\n        args.push('-lossless');\n      }\n\n       /**\n       * quality factor (0:small..100:big)\n       */\n      if (options.quality) {\n        args.push('-q');\n        args.push(options.quality);\n      }\n\n      /**\n       * Outputs the rules that have been matched.\n       */\n      if (options.verbose) {\n        args.push('-v');\n      }\n\n      args.push(f.src);\n      args.push('-o');\n      args.push(f.dest);\n\n      /**\n       * Outputs the file that is being analysed.\n       */\n      grunt.log.writeln(cwebp + ' ' + args.join(' ') );\n\n      var child = grunt.util.spawn({\n        cmd: cwebp,\n        args: args\n      }, function(error, result, code) {\n        grunt.log.writeln(code+''+result);\n        if (code !== 0) {\n          return grunt.warn(String(code));\n        }\n\n        next(error);\n      });\n\n      /**\n       * displays the output and error streams via the parent process.\n       */\n      child.stdout.pipe(process.stdout);\n      child.stderr.pipe(process.stderr);\n    }.bind(this), this.async());\n\n  });\n};\n"}